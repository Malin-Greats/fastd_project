// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/pb/parcel.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParcelServiceClient is the client API for ParcelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParcelServiceClient interface {
	CreateParcel(ctx context.Context, in *CreateParcelRequest, opts ...grpc.CallOption) (*CreateParcelResponse, error)
	FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error)
	DeliveryStage(ctx context.Context, in *DeliveryStageRequest, opts ...grpc.CallOption) (*DeliveryStageResponse, error)
}

type parcelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParcelServiceClient(cc grpc.ClientConnInterface) ParcelServiceClient {
	return &parcelServiceClient{cc}
}

func (c *parcelServiceClient) CreateParcel(ctx context.Context, in *CreateParcelRequest, opts ...grpc.CallOption) (*CreateParcelResponse, error) {
	out := new(CreateParcelResponse)
	err := c.cc.Invoke(ctx, "/parcel.ParcelService/CreateParcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelServiceClient) FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error) {
	out := new(FindOneResponse)
	err := c.cc.Invoke(ctx, "/parcel.ParcelService/FindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parcelServiceClient) DeliveryStage(ctx context.Context, in *DeliveryStageRequest, opts ...grpc.CallOption) (*DeliveryStageResponse, error) {
	out := new(DeliveryStageResponse)
	err := c.cc.Invoke(ctx, "/parcel.ParcelService/DeliveryStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParcelServiceServer is the server API for ParcelService service.
// All implementations must embed UnimplementedParcelServiceServer
// for forward compatibility
type ParcelServiceServer interface {
	CreateParcel(context.Context, *CreateParcelRequest) (*CreateParcelResponse, error)
	FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error)
	DeliveryStage(context.Context, *DeliveryStageRequest) (*DeliveryStageResponse, error)
	mustEmbedUnimplementedParcelServiceServer()
}

// UnimplementedParcelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParcelServiceServer struct {
}

func (UnimplementedParcelServiceServer) CreateParcel(context.Context, *CreateParcelRequest) (*CreateParcelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParcel not implemented")
}
func (UnimplementedParcelServiceServer) FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedParcelServiceServer) DeliveryStage(context.Context, *DeliveryStageRequest) (*DeliveryStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliveryStage not implemented")
}
func (UnimplementedParcelServiceServer) mustEmbedUnimplementedParcelServiceServer() {}

// UnsafeParcelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParcelServiceServer will
// result in compilation errors.
type UnsafeParcelServiceServer interface {
	mustEmbedUnimplementedParcelServiceServer()
}

func RegisterParcelServiceServer(s grpc.ServiceRegistrar, srv ParcelServiceServer) {
	s.RegisterService(&ParcelService_ServiceDesc, srv)
}

func _ParcelService_CreateParcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelServiceServer).CreateParcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel.ParcelService/CreateParcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelServiceServer).CreateParcel(ctx, req.(*CreateParcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel.ParcelService/FindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelServiceServer).FindOne(ctx, req.(*FindOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParcelService_DeliveryStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParcelServiceServer).DeliveryStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parcel.ParcelService/DeliveryStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParcelServiceServer).DeliveryStage(ctx, req.(*DeliveryStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParcelService_ServiceDesc is the grpc.ServiceDesc for ParcelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParcelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parcel.ParcelService",
	HandlerType: (*ParcelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateParcel",
			Handler:    _ParcelService_CreateParcel_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _ParcelService_FindOne_Handler,
		},
		{
			MethodName: "DeliveryStage",
			Handler:    _ParcelService_DeliveryStage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/parcel.proto",
}
